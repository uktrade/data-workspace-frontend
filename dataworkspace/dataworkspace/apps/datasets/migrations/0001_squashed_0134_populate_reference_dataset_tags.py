# Generated by Django 3.2.16 on 2022-12-19 12:19

import ckeditor.fields
import datetime
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.contrib.postgres.search import SearchVector

from django.core import serializers
import django.core.validators
from django.db import migrations, models, connections, ProgrammingError, transaction
import django.db.migrations.operations.special
import django.db.models.deletion
from django.db.utils import DatabaseError
from django.utils import timezone
import uuid

from django.contrib.contenttypes.models import ContentType
from dataworkspace.apps.datasets.constants import DataSetType, TagType


def generate_table_name(apps, _):
    model = apps.get_model("datasets", "ReferenceDataset")
    for r in model.objects.all():
        original_table_name = "refdata__{}".format(r.id)
        if r.table_name is None or r.table_name == original_table_name:
            r.table_name = "ref_{}".format(r.slug.replace("-", "_"))
            print('Changing table "{}" to "{}"'.format(original_table_name, r.table_name))
            r.schema_version += 1
            r.save()

            # Check the original table exists before renaming
            with connections.cursor() as cursor:
                cursor.execute("SELECT to_regclass(%s)", [original_table_name])
                if cursor.fetchone()[0] is None:
                    continue

            # Rename the table
            with connections.schema_editor() as editor:
                try:
                    editor.alter_db_table(model, original_table_name, r.table_name)
                except ProgrammingError:
                    pass


def generate_column_name(apps, _):
    model = apps.get_model("datasets", "ReferenceDatasetField")
    for field in model.objects.all():
        field.column_name = "field_{}".format(field.id)
        field.save()


def reorder(apps, _):
    ReferenceDataset = apps.get_model("datasets", "ReferenceDataset")
    for reference_dataset in ReferenceDataset.objects.all():
        for index, field in enumerate(reference_dataset.fields.all()):
            field.sort_order = index + 1
            field.save()


def update_joint_dataset_version_number(apps, schema_editor):
    ReferenceDataset = apps.get_model("datasets", "ReferenceDataset")
    joint_datasets = ReferenceDataset.objects.filter(is_joint_dataset=True, deleted=False)
    for dataset in joint_datasets:
        dataset.major_version += 1
        dataset.minor_version = 0
        dataset.save()


def set_default_values_of_published_datasets(apps, schema_editor):
    ReferenceDataset = apps.get_model("datasets", "ReferenceDataset")
    datasets = ReferenceDataset.objects.all()
    for dataset in datasets:
        dataset.published_major_version = dataset.major_version
        dataset.published_minor_version = dataset.minor_version
        dataset.initial_published_at = timezone.now()
        if dataset.published:
            dataset.published_at = timezone.now()
        dataset.save()


def migrate_data_cut_to_master_dataset(apps, _):
    model = apps.get_model("datasets", "DataCutDataset")
    for dataset in model.objects.filter(sourcetable__isnull=False):
        dataset.type = DataSetType.MASTER
        dataset.save()


def generate_uuids(apps, _):
    """
    Generate unique uuids for ReferenceDatasets
    """
    ReferenceDataset = apps.get_model("datasets", "ReferenceDataset")
    for dataset in ReferenceDataset.objects.all():
        dataset.uuid = uuid.uuid4()
        dataset.save()


def add_dataset_iam_info(apps, _):
    """
    Update all datasets to have the same IAM contact information
    as their data grouping
    """
    Dataset = apps.get_model("datasets", "DataSet")
    for dataset in Dataset.objects.exclude(grouping__isnull=True).all():
        dataset.information_asset_owner = dataset.grouping.information_asset_owner
        dataset.information_asset_manager = dataset.grouping.information_asset_manager
        dataset.save()
    ReferenceDataset = apps.get_model("datasets", "ReferenceDataset")
    for ref_dataset in ReferenceDataset.objects.exclude(group__isnull=True).all():
        ref_dataset.information_asset_owner = ref_dataset.group.information_asset_owner
        ref_dataset.information_asset_manager = ref_dataset.group.information_asset_manager
        ref_dataset.save()


def copy_permissions(apps, schema_editor):
    VisualisationCatalogueItem = apps.get_model("datasets", "VisualisationCatalogueItem")
    VisualisationUserPermission = apps.get_model("datasets", "VisualisationUserPermission")

    visualisations = VisualisationCatalogueItem.objects.all()
    for visualisation in visualisations:
        user_permissions = (
            visualisation.visualisation_template.applicationtemplateuserpermission_set.all()
        )

        for user_permission in user_permissions:
            VisualisationUserPermission.objects.create(
                visualisation=visualisation, user=user_permission.user
            )

        visualisation.save()

    for visualisation in visualisations:
        visualisation.user_access_type = visualisation.visualisation_template.user_access_type
        visualisation.save()


@transaction.atomic
def set_query_tables(apps, schema_editor):
    CustomDatasetQuery = apps.get_model("datasets", "CustomDatasetQuery")

    for query in CustomDatasetQuery.objects.all():
        if query.tables.all():
            continue

        CustomDatasetQuery.objects.select_for_update().get(id=query.id)
        with connections[query.database.memorable_name].cursor() as cursor:
            try:
                with transaction.atomic():
                    cursor.execute(
                        f"create temporary view get_tables as (select 1 from ({query.query.strip().rstrip(';')}) sq)"
                    )
            except DatabaseError:
                continue
            cursor.execute(
                "select table_schema, table_name from information_schema.view_table_usage where view_name = 'get_tables'"
            )
            tables = cursor.fetchall()
            cursor.execute("drop view get_tables")

        for t in tables:
            query.tables.create(schema=t[0], table=t[1])


@transaction.atomic
def update_linked_reference_datasets(apps, schema_editor):
    ReferenceDatasetField = apps.get_model("datasets", "ReferenceDatasetField")
    for field in ReferenceDatasetField.objects.filter(data_type=8):
        linked_identifier_field = field.linked_reference_dataset.fields.get(is_identifier=True)
        linked_display_name_field = field.linked_reference_dataset.fields.get(is_display_name=True)

        # This will be used as the prefix in the new field name
        original_field_name = field.name
        # This will be used as the relationshp_name
        original_column_name = field.column_name

        # Modify existing linked reference dataset field to match
        # new structure and point it to the original identifier field
        field.name = f"{original_field_name}: {linked_identifier_field.name}"
        field.relationship_name = original_column_name
        field.column_name = None
        field.linked_reference_dataset_field = linked_identifier_field
        field.save()

        # Create new linked reference dataset field and point it to the
        # original display name field
        display_field = ReferenceDatasetField()
        display_field.reference_dataset = field.reference_dataset
        display_field.data_type = 8
        display_field.name = f"{original_field_name}: {linked_display_name_field.name}"
        display_field.description = linked_display_name_field.description
        display_field.relationship_name = original_column_name
        display_field.linked_reference_dataset_field = linked_display_name_field
        display_field.save()


def set_published_at_dates(apps, schema_editor):
    Dataset = apps.get_model("datasets", "dataset")
    for dataset in Dataset.objects.filter(published=True, published_at__isnull=True):
        dataset.published_at = dataset.created_date
        dataset.save()


def _migrate(apps, model_name):
    Dataset = apps.get_model("datasets", model_name)
    Tag = apps.get_model("datasets", "Tag")

    for dataset in Dataset.objects.all():
        for source_tag in dataset.source_tags.all():
            t, _ = Tag.objects.get_or_create(name=source_tag.name, type=TagType.SOURCE)
            dataset.tags.add(t)


@transaction.atomic
def migrate_source_tags_to_tags(apps, schema_editor):
    _migrate(apps, "Dataset")
    _migrate(apps, "ReferenceDataset")


def save_datasets(apps, _):
    for reference_dataset in apps.get_model("datasets", "ReferenceDataset").objects.all():
        reference_dataset.save()

    for dataset in apps.get_model("datasets", "DataSet").objects.all():
        dataset.save()


def set_download_limit(apps, schema_editor):
    for source in apps.get_model("datasets", "SourceTable").objects.filter(data_grid_enabled=True):
        source.data_grid_download_enabled = (
            source.data_grid_column_config
            and source.data_grid_column_config.get("download_enabled", False)
        )
        if source.data_grid_download_enabled:
            source.data_grid_download_limit = (
                source.data_grid_column_config.get("download_limit", 5000)
                if source.data_grid_column_config
                else 5000
            )
        source.save()


def migrate_sql_pipelines(apps, _):
    for pipeline in apps.get_model("datasets", "Pipeline").objects.all():
        pipeline.type = "sql"
        pipeline.config = {"sql": pipeline.sql_query}
        pipeline.save()


def migrate_query_download_events(apps, _):
    """
    Migrate any old `TYPE_DATASET_CUSTOM_QUERY_DOWNLOAD_COMPLETE` event log events
    to point to the dataset rather than the source model.
    """
    eventlog_model = apps.get_model("eventlog", "EventLog")
    source_model = apps.get_model("datasets", "CustomDatasetQuery")
    for event in eventlog_model.objects.filter(event_type__in=[5, 22]).iterator():
        try:
            source = source_model.objects.get(id=event.object_id)
        except (source_model.DoesNotExist, ValueError):
            continue
        event.content_type_id = ContentType.objects.get_for_model(source.dataset).id
        event.object_id = source.dataset_id
        event.extra.update(**serializers.serialize("python", [source])[0])
        event.save()


def generate_search_vector_english(apps, schema_editor):
    # We can't import the models directly as it may be a newer
    # version than this migration expects. We use the historical version.
    DataSet = apps.get_model("datasets", "DataSet")
    ReferenceDataset = apps.get_model("datasets", "ReferenceDataset")
    VisualisationCatalogueItem = apps.get_model("datasets", "VisualisationCatalogueItem")
    for dataset in DataSet.objects.all():
        dataset.save()
    for dataset in ReferenceDataset.objects.all():
        dataset.save()
    for dataset in VisualisationCatalogueItem.objects.all():
        dataset.save()

    for obj in DataSet.objects.all():
        tag_names = " ".join([x.name for x in obj.tags.all()])
        obj.search_vector_english = (
            SearchVector("name", weight="A", config="english")
            + SearchVector("short_description", weight="B", config="english")
            + SearchVector(models.Value(tag_names), weight="C", config="english")
            + SearchVector("description", weight="D", config="english")
            + SearchVector("acronyms", weight="D", config="english")
        )
        obj.save()

    for obj in ReferenceDataset.objects.all():
        tag_names = " ".join([x.name for x in obj.tags.all()])
        obj.search_vector_english = (
            SearchVector("name", weight="A", config="english")
            + SearchVector("short_description", weight="B", config="english")
            + SearchVector("acronyms", weight="D", config="english")
            + SearchVector(models.Value(tag_names), weight="C", config="english")
            + SearchVector("description", weight="D", config="english")
            + SearchVector("acronyms", weight="D", config="english")
        )
        obj.save()

    for obj in VisualisationCatalogueItem.objects.all():
        tag_names = " ".join([x.name for x in obj.tags.all()])
        obj.search_vector_english = (
            SearchVector("name", weight="A", config="english")
            + SearchVector("short_description", weight="B", config="english")
            + SearchVector(models.Value(tag_names), weight="C", config="english")
            + SearchVector("description", weight="D", config="english")
        )
        obj.save()


def map_referencedatasets_to_datasets(apps, _):
    ReferenceDatasetModel = apps.get_model("datasets", "referencedataset")

    for referencedataset in ReferenceDatasetModel.objects.all():
        referencedataset.save()


def resave_reference_datasets(apps, _):
    for dataset in apps.get_model("datasets", "referencedataset").objects.all():
        dataset.save()


def resave_reference_dataset_tags(apps, _):
    for dataset in apps.get_model("datasets", "referencedataset").objects.all():
        tags = list(dataset.tags.all())
        dataset.tags.set(tags)


def noop(apps, schema_editor):
    pass


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# dataworkspace.apps.datasets.migrations.0004_auto_20190813_1536 \
# dataworkspace.apps.datasets.migrations.0007_auto_20190813_1544 \
# dataworkspace.apps.datasets.migrations.0014_auto_20190906_0934 \
# dataworkspace.apps.datasets.migrations.0022_joint_datasets_linked_field_name_change \
# dataworkspace.apps.datasets.migrations.0024_auto_20191118_1349 \
# dataworkspace.apps.datasets.migrations.0027_migrate_master_datasets \
# dataworkspace.apps.datasets.migrations.0029_reference_dataset_add_uuid \
# dataworkspace.apps.datasets.migrations.0035_migrate_group_asset_manager_data \
# dataworkspace.apps.datasets.migrations.0047_auto_20200609_1027 \
# dataworkspace.apps.datasets.migrations.0048_auto_20200609_2116 \
# dataworkspace.apps.datasets.migrations.0053_set_custom_dataset_query_tables \
# dataworkspace.apps.datasets.migrations.0055_update_linked_reference_datasets \
# dataworkspace.apps.datasets.migrations.0057_auto_20201021_1454 \
# dataworkspace.apps.datasets.migrations.0059_migrate_source_tags \
# dataworkspace.apps.datasets.migrations.0101_auto_20211207_1150 \
# dataworkspace.apps.datasets.migrations.0108_set_source_table_grid_fields \
# dataworkspace.apps.datasets.migrations.0114_migrate_sql_pipelines \
# dataworkspace.apps.datasets.migrations.0118_migrate_grid_query_downloads \
# dataworkspace.apps.datasets.migrations.0122_auto_20220613_1308 \
# dataworkspace.apps.datasets.migrations.0123_auto_20220613_1359 \
# dataworkspace.apps.datasets.migrations.0127_auto_20220615_1557 \
# dataworkspace.apps.datasets.migrations.0128_auto_20220616_1649 \
# dataworkspace.apps.datasets.migrations.0130_migrate_referencedatasets_to_datasets
# dataworkspace.apps.datasets.migrations.0131_refesh_reference_dataset_inhertance
# dataworkspace.apps.datasets.migrations.0134_populate_reference_dataset_tags


class Migration(migrations.Migration):

    replaces = [
        ("datasets", "0001_initial"),
        ("datasets", "0002_auto_20190820_0623"),
        ("datasets", "0003_referencedataset_table_name"),
        ("datasets", "0004_auto_20190813_1536"),
        ("datasets", "0005_auto_20190813_1536"),
        ("datasets", "0006_auto_20190813_1544"),
        ("datasets", "0007_auto_20190813_1544"),
        ("datasets", "0008_auto_20190813_1544"),
        ("datasets", "0009_auto_20190819_1227"),
        ("datasets", "0010_auto_20190820_0829"),
        ("datasets", "0011_merge_20190821_0558"),
        ("datasets", "0012_auto_20190827_1553"),
        ("datasets", "0013_referencedatasetuploadlog_referencedatasetuploadlogrecord"),
        ("datasets", "0014_auto_20190906_0934"),
        ("datasets", "0015_auto_20190906_1015"),
        ("datasets", "0016_auto_20191009_1341"),
        ("datasets", "0017_sourceview"),
        ("datasets", "0018_sourcetable_accessible_by_google_data_studio"),
        ("datasets", "0016_auto_20191016_0933"),
        ("datasets", "0019_merge_20191019_1154"),
        ("datasets", "0020_auto_20191019_1923"),
        ("datasets", "0021_dataset_access_criteria"),
        ("datasets", "0022_joint_datasets_linked_field_name_change"),
        ("datasets", "0023_add_number_of_downloads_fields"),
        ("datasets", "0024_auto_20191118_1349"),
        ("datasets", "0025_referencedataset_description_rich_text_field"),
        ("datasets", "0026_add_dataset_type_proxy_models"),
        ("datasets", "0027_migrate_master_datasets"),
        ("datasets", "0028_add_dataset_source_tags"),
        ("datasets", "0029_reference_dataset_add_uuid"),
        ("datasets", "0030_reference_dataset_unique_uuid"),
        ("datasets", "0031_add_referencedataset_source_tags"),
        ("datasets", "0032_auto_20191227_1109"),
        ("datasets", "0033_datasetapplicationtemplatepermission"),
        ("datasets", "0034_add_dataset_asset_manager_fields"),
        ("datasets", "0035_migrate_group_asset_manager_data"),
        ("datasets", "0036_auto_20200205_1531"),
        ("datasets", "0037_add_dataset_soft_delete"),
        ("datasets", "0038_add_permissions_and_customdatasetquery_defaults"),
        ("datasets", "0039_auto_20200309_1108"),
        ("datasets", "0040_visualisationcatalogueitem"),
        ("datasets", "0041_auto_20200416_1939"),
        ("datasets", "0042_auto_20200417_1113"),
        ("datasets", "0042_add_dataset_source_references"),
        ("datasets", "0043_merge_20200420_1541"),
        ("datasets", "0044_auto_20200421_0842"),
        ("datasets", "0045_auto_20200421_0904"),
        ("datasets", "0046_visualisationcatalogueitem_eligibility_criteria"),
        ("datasets", "0047_auto_20200609_1027"),
        ("datasets", "0048_auto_20200609_2116"),
        ("datasets", "0049_auto_20200610_1007"),
        ("datasets", "0050_auto_20200805_1226"),
        ("datasets", "0051_auto_20200819_0817"),
        ("datasets", "0052_customdatasetquerytable"),
        ("datasets", "0053_set_custom_dataset_query_tables"),
        ("datasets", "0054_auto_20200921_1610"),
        ("datasets", "0055_update_linked_reference_datasets"),
        ("datasets", "0056_dataset_published_at"),
        ("datasets", "0057_auto_20201021_1454"),
        ("datasets", "0058_auto_20201113_1136"),
        ("datasets", "0059_migrate_source_tags"),
        ("datasets", "0060_auto_20201113_1221"),
        ("datasets", "0061_toolqueryauditlog"),
        ("datasets", "0062_visualisationcatalogueitem_tags"),
        ("datasets", "0063_tool_query_audit_log_constraints"),
        ("datasets", "0064_drop_audit_log_constraints"),
        ("datasets", "0065_add_audit_log_hashed_unique_index"),
        ("datasets", "0064_auto_20201222_1032"),
        ("datasets", "0066_merge_20201223_0923"),
        ("datasets", "0064_toolqueryauditlogtable"),
        ("datasets", "0065_merge_20201222_1521"),
        ("datasets", "0066_auto_20201222_1521"),
        ("datasets", "0067_merge_20201230_0939"),
        ("datasets", "0068_remove_google_data_studio"),
        ("datasets", "0069_visualisationlink_data_source_last_updated"),
        ("datasets", "0070_auto_20210311_1233"),
        ("datasets", "0071_auto_20210315_0950"),
        ("datasets", "0072_sourcetable_dataset_finder_opted_in"),
        ("datasets", "0073_auto_20210419_1639"),
        ("datasets", "0074_dataset_bookmarks"),
        ("datasets", "0075_auto_20210504_1056"),
        ("datasets", "0076_customdatasetquery_data_grid_enabled"),
        ("datasets", "0077_datasetvisualisation"),
        ("datasets", "0078_auto_20210528_1642"),
        ("datasets", "0079_datasetvisualisation_thumbnail"),
        ("datasets", "0080_auto_20210611_0932"),
        ("datasets", "0081_datasetvisualisation_gds_phase_name"),
        ("datasets", "0082_alter_datasetvisualisation_gds_phase_name"),
        ("datasets", "0081_auto_20210729_1113"),
        ("datasets", "0083_merge_20210730_1531"),
        ("datasets", "0084_auto_20210803_1043"),
        ("datasets", "0085_remove_datasetvisualisation_thumbnail"),
        ("datasets", "0086_auto_20210809_1627"),
        ("datasets", "0084_alter_sourcetable_data_grid_column_config"),
        ("datasets", "0087_merge_20210824_0940"),
        ("datasets", "0088_visualisationcatalogueitem_datasets"),
        ("datasets", "0089_visualisationcatalogueitem_licence_url"),
        ("datasets", "0090_referencedataset_licence_url"),
        ("datasets", "0091_visualisationlinksqlquery"),
        ("datasets", "0092_auto_20211007_1219"),
        ("datasets", "0093_visualisationlinksqlquery_table_id"),
        ("datasets", "0093_auto_20211018_1717"),
        ("datasets", "0094_merge_20211026_0948"),
        ("datasets", "0095_toolqueryauditlog_connection_from"),
        ("datasets", "0096_datasetsubscription"),
        ("datasets", "0096_alter_referencedatasetfield_data_type"),
        ("datasets", "0097_merge_20211116_1641"),
        ("datasets", "0098_auto_20211119_1906"),
        ("datasets", "0099_alter_tag_options"),
        ("datasets", "0100_auto_20211129_1411"),
        ("datasets", "0101_auto_20211207_1150"),
        ("datasets", "0102_auto_20211215_0909"),
        ("datasets", "0102_auto_20211210_2106"),
        ("datasets", "0103_merge_0102_auto_20211210_2106_0102_auto_20211215_0909"),
        ("datasets", "0104_pipeline"),
        ("datasets", "0105_alter_pipeline_table_name"),
        ("datasets", "0104_referencedataset_is_draft"),
        ("datasets", "0106_merge_20211224_1317"),
        ("datasets", "0107_add_source_table_grid_fields"),
        ("datasets", "0108_set_source_table_grid_fields"),
        ("datasets", "0109_remove_data_grid_column_config"),
        ("datasets", "0110_pipelineversion"),
        ("datasets", "0107_datasetchartbuilderchart"),
        ("datasets", "0110_merge_20220214_1050"),
        ("datasets", "0111_merge_0110_merge_20220214_1050_0110_pipelineversion"),
        ("datasets", "0112_pendingauthorizedusers"),
        ("datasets", "0113_add_pipeline_config"),
        ("datasets", "0114_migrate_sql_pipelines"),
        ("datasets", "0115_remove_pipeline_sql_query"),
        ("datasets", "0116_order_pipelines_by_name"),
        ("datasets", "0113_remove_datasetchartbuilderchart_chart"),
        ("datasets", "0114_datasetchartbuilderchart_chart"),
        ("datasets", "0113_alter_masterdataset_options"),
        ("datasets", "0115_merge_20220426_0858"),
        ("datasets", "0117_merge_20220426_1142"),
        ("datasets", "0118_sourcetablefielddefinition"),
        ("datasets", "0118_migrate_grid_query_downloads"),
        ("datasets", "0119_merge_20220530_1051"),
        ("datasets", "0120_dataset_dictionary_published"),
        ("datasets", "0121_auto_20220613_1308"),
        ("datasets", "0122_auto_20220613_1308"),
        ("datasets", "0123_auto_20220613_1359"),
        ("datasets", "0121_auto_20220609_1639"),
        ("datasets", "0124_merge_0121_auto_20220609_1639_0123_auto_20220613_1359"),
        ("datasets", "0124_auto_20220613_1524"),
        ("datasets", "0125_merge_20220614_1604"),
        ("datasets", "0126_auto_20220614_1814"),
        ("datasets", "0127_auto_20220615_1557"),
        ("datasets", "0128_auto_20220616_1649"),
        ("datasets", "0129_auto_20221031_1449"),
        ("datasets", "0130_migrate_referencedatasets_to_datasets"),
        ("datasets", "0131_refesh_reference_dataset_inhertance"),
        ("datasets", "0132_alter_dataset_type"),
        ("datasets", "0133_alter_dataset_type"),
        ("datasets", "0134_populate_reference_dataset_tags"),
    ]

    initial = True

    dependencies = [
        ("core", "0006_chartbuilderchart"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0001_initial"),
        ("core", "0003_usersatisfactionsurvey"),
        ("applications", "0001_squashed_0022_auto_20200414_1352"),
        ("applications", "0008_auto_20200519_1245"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("explorer", "0017_chartbuilderchart"),
        ("eventlog", "0015_add_notification_event_types"),
    ]

    operations = [
        migrations.CreateModel(
            name="DataGrouping",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=128, unique=True)),
                ("short_description", models.CharField(max_length=256)),
                ("description", models.TextField(blank=True, null=True)),
                ("slug", models.SlugField(unique=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "information_asset_manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asset_manager",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "information_asset_owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asset_owner",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "app_datagrouping",
            },
        ),
        migrations.CreateModel(
            name="DataSet",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("slug", models.SlugField()),
                ("short_description", models.CharField(max_length=256)),
                ("description", models.TextField()),
                ("redactions", models.TextField(blank=True, null=True)),
                ("licence", models.CharField(blank=True, max_length=256, null=True)),
                ("volume", models.IntegerField()),
                ("retention_policy", models.TextField(blank=True, null=True)),
                ("personal_data", models.CharField(blank=True, max_length=128, null=True)),
                ("restrictions_on_usage", models.TextField(blank=True, null=True)),
                (
                    "user_access_type",
                    models.CharField(
                        choices=[
                            ("REQUIRES_AUTHENTICATION", "Requires authentication"),
                            ("REQUIRES_AUTHORIZATION", "Requires authorization"),
                        ],
                        default="REQUIRES_AUTHORIZATION",
                        max_length=64,
                    ),
                ),
                ("published", models.BooleanField(default=False)),
                (
                    "enquiries_contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "grouping",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.datagrouping"
                    ),
                ),
            ],
            options={
                "db_table": "app_dataset",
            },
        ),
        migrations.CreateModel(
            name="ReferenceDataset",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField()),
                ("short_description", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("licence", models.CharField(blank=True, max_length=256)),
                ("restrictions_on_usage", models.TextField(blank=True, null=True)),
                ("valid_from", models.DateField(blank=True, null=True)),
                ("valid_to", models.DateField(blank=True, null=True)),
                ("published", models.BooleanField(default=False)),
                ("schema_version", models.IntegerField(default=0)),
                ("major_version", models.IntegerField(default=1)),
                ("minor_version", models.IntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "enquiries_contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.datagrouping"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "table_name",
                    models.CharField(
                        help_text='Descriptive table name for the field - Note: Must start with "ref_" and contain only letters, numbers and underscores',
                        max_length=255,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message='Table names must be prefixed with "ref_" and can contain only letters, numbers and underscores',
                                regex="^ref_[a-zA-Z0-9_]*$",
                            )
                        ],
                        verbose_name="Table name",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reference dataset",
                "db_table": "app_referencedataset",
            },
        ),
        migrations.CreateModel(
            name="SourceTable",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Used as the displayed text in the download link",
                        max_length=1024,
                    ),
                ),
                (
                    "schema",
                    models.CharField(
                        default="public",
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$"
                            )
                        ],
                    ),
                ),
                (
                    "table",
                    models.CharField(
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$"
                            )
                        ],
                    ),
                ),
                (
                    "database",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.database",
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.dataset"
                    ),
                ),
            ],
            options={
                "db_table": "app_sourcetable",
            },
        ),
        migrations.CreateModel(
            name="SourceLink",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "link_type",
                    models.IntegerField(
                        choices=[(1, "External Link"), (2, "Local Link")], default=1
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Used as the displayed text in the download link", max_length=128
                    ),
                ),
                ("url", models.CharField(max_length=256)),
                ("format", models.CharField(max_length=10)),
                ("frequency", models.CharField(max_length=50)),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.dataset"
                    ),
                ),
            ],
            options={
                "db_table": "app_sourcelink",
            },
        ),
        migrations.CreateModel(
            name="DataSetUserPermission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.dataset"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "app_datasetuserpermission",
                "unique_together": {("user", "dataset")},
            },
        ),
        migrations.CreateModel(
            name="ReferenceDatasetField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "data_type",
                    models.IntegerField(
                        choices=[
                            (1, "Character field"),
                            (2, "Integer field"),
                            (3, "Float field"),
                            (4, "Date field"),
                            (5, "Time field"),
                            (6, "Datetime field"),
                            (7, "Boolean field"),
                        ]
                    ),
                ),
                (
                    "is_identifier",
                    models.BooleanField(
                        default=False,
                        help_text="This field is the unique identifier for the record",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="The display name for the field", max_length=255),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("required", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reference_dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fields",
                        to="datasets.referencedataset",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Reference dataset field",
                "db_table": "app_referencedatasetfield",
                "ordering": ("id",),
                "unique_together": {("reference_dataset", "name")},
            },
        ),
        migrations.RunPython(generate_table_name, reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name="referencedataset",
            name="table_name",
            field=models.CharField(
                help_text='Descriptive table name for the field - Note: Must start with "ref_" and contain only letters, numbers and underscores',
                max_length=255,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message='Table names must be prefixed with "ref_" and can contain only letters, numbers and underscores',
                        regex="^ref_[a-zA-Z0-9_]*$",
                    )
                ],
                verbose_name="Table name",
            ),
        ),
        migrations.AddField(
            model_name="referencedatasetfield",
            name="column_name",
            field=models.CharField(
                help_text="Descriptive column name for the field - Column name will be used in external databases",
                max_length=255,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Column names must start with a letter and contain only letters, numbers, underscores and full stops.",
                        regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$",
                    )
                ],
            ),
        ),
        migrations.AlterUniqueTogether(
            name="referencedatasetfield",
            unique_together={("reference_dataset", "name"), ("reference_dataset", "column_name")},
        ),
        migrations.RunPython(generate_column_name, reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="column_name",
            field=models.CharField(
                help_text="Descriptive column name for the field - Column name will be used in external databases",
                max_length=255,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Column names must start with a letter and contain only letters, numbers, underscores and full stops.",
                        regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$",
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="referencedataset",
            name="table_name",
            field=models.CharField(
                help_text='Descriptive table name for the field - Note: Must start with "ref_" and contain only lowercase letters, numbers and underscores',
                max_length=255,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message='Table names must be prefixed with "ref_" and can contain only lowercase letters, numbers and underscores',
                        regex="^ref_[a-z0-9_]*$",
                    )
                ],
                verbose_name="Table name",
            ),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="external_database",
            field=models.ForeignKey(
                blank=True,
                help_text="Name of the analysts database to keep in sync with this reference dataset",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.database",
            ),
        ),
        migrations.AddField(
            model_name="referencedatasetfield",
            name="is_display_name",
            field=models.BooleanField(
                default=False,
                help_text="This field is the name that will be displayed when referenced by other datasets",
            ),
        ),
        migrations.AddField(
            model_name="referencedatasetfield",
            name="linked_reference_dataset",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="linked_fields",
                to="datasets.referencedataset",
            ),
        ),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="data_type",
            field=models.IntegerField(
                choices=[
                    (1, "Character field"),
                    (2, "Integer field"),
                    (3, "Float field"),
                    (4, "Date field"),
                    (5, "Time field"),
                    (6, "Datetime field"),
                    (7, "Boolean field"),
                    (8, "Linked Reference Dataset"),
                ]
            ),
        ),
        migrations.CreateModel(
            name="ReferenceDatasetUploadLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reference_dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.referencedataset"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("created_date",),
            },
        ),
        migrations.CreateModel(
            name="ReferenceDatasetUploadLogRecord",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Record added successfully"),
                            (2, "Record updated successfully"),
                            (3, "Record upload failed"),
                        ]
                    ),
                ),
                ("row_data", django.contrib.postgres.fields.jsonb.JSONField()),
                ("errors", django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                (
                    "upload_log",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="records",
                        to="datasets.referencedatasetuploadlog",
                    ),
                ),
            ],
            options={
                "ordering": ("created_date",),
            },
        ),
        migrations.AlterModelOptions(
            name="referencedatasetfield",
            options={"ordering": ("sort_order",), "verbose_name": "Reference dataset field"},
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="sort_direction",
            field=models.IntegerField(choices=[(1, "Ascending"), (2, "Descending")], default=1),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="sort_field",
            field=models.ForeignKey(
                blank=True,
                help_text="The field to order records by in any outputs. If not set records will be sorted by last updated date.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="datasets.referencedatasetfield",
            ),
        ),
        migrations.AddField(
            model_name="referencedatasetfield",
            name="sort_order",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.RunPython(reorder, reverse_code=migrations.RunPython.noop),
        migrations.AddField(
            model_name="sourcetable",
            name="created_date",
            field=models.DateTimeField(
                auto_now_add=True, default=datetime.datetime(2019, 9, 6, 10, 15, 24, 868019)
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="sourcetable",
            name="modified_date",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.CreateModel(
            name="CustomDatasetQuery",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("query", models.TextField()),
                (
                    "frequency",
                    models.IntegerField(
                        choices=[
                            (1, "Daily"),
                            (2, "Weekly"),
                            (3, "Monthly"),
                            (4, "Quarterly"),
                            (5, "Annually"),
                        ]
                    ),
                ),
                (
                    "database",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.database"
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.dataset"
                    ),
                ),
            ],
            options={
                "verbose_name": "SQL Query",
                "verbose_name_plural": "SQL Queries",
            },
        ),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="data_type",
            field=models.IntegerField(
                choices=[
                    (1, "Character field"),
                    (2, "Integer field"),
                    (3, "Float field"),
                    (4, "Date field"),
                    (5, "Time field"),
                    (6, "Datetime field"),
                    (7, "Boolean field"),
                    (8, "Linked Reference Dataset"),
                    (9, "Universal unique identifier field"),
                    (10, "Auto incrementing integer field"),
                ]
            ),
        ),
        migrations.CreateModel(
            name="SourceView",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Used as the displayed text in the download link",
                        max_length=1024,
                    ),
                ),
                (
                    "schema",
                    models.CharField(
                        default="public",
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$"
                            )
                        ],
                    ),
                ),
                (
                    "view",
                    models.CharField(
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$"
                            )
                        ],
                    ),
                ),
                (
                    "database",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.database",
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.dataset"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="sourcetable",
            name="accessible_by_google_data_studio",
            field=models.BooleanField(
                default=False, help_text="Only Superusers can access the data"
            ),
        ),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="data_type",
            field=models.IntegerField(
                choices=[
                    (1, "Character field"),
                    (2, "Integer field"),
                    (3, "Float field"),
                    (4, "Date field"),
                    (5, "Time field"),
                    (6, "Datetime field"),
                    (7, "Boolean field"),
                    (8, "Linked Reference Dataset"),
                    (9, "Universal unique identifier field"),
                    (10, "Auto incrementing integer field"),
                ]
            ),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="is_joint_dataset",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="dataset",
            name="eligibility_criteria",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=256), null=True, size=None
            ),
        ),
        migrations.RunPython(update_joint_dataset_version_number, migrations.RunPython.noop),
        migrations.AddField(
            model_name="dataset",
            name="number_of_downloads",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="number_of_downloads",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="initial_published_at",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="published_at",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="published_major_version",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="published_minor_version",
            field=models.IntegerField(default=0),
        ),
        migrations.RunPython(
            set_default_values_of_published_datasets,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="referencedataset",
            name="description",
            field=ckeditor.fields.RichTextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="DataCutDataset",
            fields=[],
            options={
                "verbose_name": "Data Cut Dataset",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("datasets.dataset",),
        ),
        migrations.CreateModel(
            name="MasterDataset",
            fields=[],
            options={
                "verbose_name": "Master Dataset",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("datasets.dataset",),
        ),
        migrations.AddField(
            model_name="dataset",
            name="type",
            field=models.IntegerField(choices=[(1, "Master Dataset"), (2, "Data Cut")], default=2),
        ),
        migrations.CreateModel(
            name="DataCutDatasetUserPermission",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("datasets.datasetuserpermission",),
        ),
        migrations.CreateModel(
            name="MasterDatasetUserPermission",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("datasets.datasetuserpermission",),
        ),
        migrations.RemoveField(
            model_name="dataset",
            name="redactions",
        ),
        migrations.RemoveField(
            model_name="dataset",
            name="volume",
        ),
        migrations.AddField(
            model_name="sourcetable",
            name="frequency",
            field=models.IntegerField(
                choices=[
                    (1, "Daily"),
                    (2, "Weekly"),
                    (3, "Monthly"),
                    (4, "Quarterly"),
                    (5, "Annually"),
                ],
                default=1,
            ),
        ),
        migrations.AddField(
            model_name="sourceview",
            name="frequency",
            field=models.IntegerField(
                choices=[
                    (1, "Daily"),
                    (2, "Weekly"),
                    (3, "Monthly"),
                    (4, "Quarterly"),
                    (5, "Annually"),
                ],
                default=1,
            ),
        ),
        migrations.RunPython(
            migrate_data_cut_to_master_dataset, reverse_code=migrations.RunPython.noop
        ),
        migrations.CreateModel(
            name="SourceTag",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="dataset",
            name="source_tags",
            field=models.ManyToManyField(
                blank=True, related_name="_dataset_source_tags_+", to="datasets.SourceTag"
            ),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="uuid",
            field=models.UUIDField(blank=True, default=uuid.uuid4, editable=False, null=True),
        ),
        migrations.RunPython(generate_uuids, migrations.RunPython.noop),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="reference_dataset",
            field=models.ForeignKey(
                db_constraint=False,
                db_index=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="referencedataset",
            ),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="source_tags",
            field=models.ManyToManyField(
                blank=True, related_name="_referencedataset_source_tags_+", to="datasets.SourceTag"
            ),
        ),
        migrations.AlterField(
            model_name="referencedataset",
            name="uuid",
            field=models.UUIDField(default=uuid.uuid4, editable=False),
        ),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="reference_dataset",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fields",
                to="datasets.referencedataset",
            ),
        ),
        migrations.CreateModel(
            name="DataSetApplicationTemplatePermission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "application_template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="applications.applicationtemplate",
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.dataset"
                    ),
                ),
            ],
            options={
                "db_table": "app_datasetapplicationtemplatepermission",
                "unique_together": {("dataset", "application_template")},
            },
        ),
        migrations.AddField(
            model_name="dataset",
            name="information_asset_manager",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="info_asset_managed_datasets",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="dataset",
            name="information_asset_owner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="info_asset_owned_datasets",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="information_asset_manager",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="info_asset_managed_reference_datasets",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="information_asset_owner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="info_asset_owned_reference_datasets",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RunPython(add_dataset_iam_info, migrations.RunPython.noop),
        migrations.AlterField(
            model_name="dataset",
            name="grouping",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="datasets.datagrouping"
            ),
        ),
        migrations.AlterField(
            model_name="referencedataset",
            name="group",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="datasets.datagrouping"
            ),
        ),
        migrations.AddField(
            model_name="dataset",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="dataset",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="dataset",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="updated+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterModelOptions(
            name="datacutdataset",
            options={
                "permissions": [
                    (
                        "manage_unpublished_datacut_datasets",
                        "Manage (create, view, edit) unpublished datacut datasets",
                    )
                ],
                "verbose_name": "Data Cut Dataset",
            },
        ),
        migrations.AlterModelOptions(
            name="masterdataset",
            options={
                "permissions": [
                    (
                        "manage_unpublished_master_datasets",
                        "Manage (create, view, edit) unpublished master datasets",
                    )
                ],
                "verbose_name": "Master Dataset",
            },
        ),
        migrations.AlterModelOptions(
            name="referencedataset",
            options={
                "permissions": [
                    (
                        "manage_unpublished_reference_datasets",
                        "Manage (create, view, edit) unpublished reference datasets",
                    )
                ],
                "verbose_name": "Reference dataset",
            },
        ),
        migrations.AddField(
            model_name="customdatasetquery",
            name="reviewed",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="description",
            field=ckeditor.fields.RichTextField(),
        ),
        migrations.CreateModel(
            name="DatasetReferenceCode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    models.CharField(
                        help_text="Short code to identify the source (eg. DH for Data Hub, EW for Export Wins)",
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("counter", models.IntegerField(default=0)),
            ],
            options={
                "abstract": False,
                "ordering": ("code",),
            },
        ),
        migrations.AddField(
            model_name="customdatasetquery",
            name="reference_number",
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name="sourcelink",
            name="reference_number",
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name="sourcetable",
            name="reference_number",
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name="sourceview",
            name="reference_number",
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name="dataset",
            name="reference_code",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="datasets.datasetreferencecode",
            ),
        ),
        migrations.CreateModel(
            name="VisualisationCatalogueItem",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField(unique=True)),
                ("short_description", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("licence", models.CharField(blank=True, max_length=256)),
                ("retention_policy", models.TextField(blank=True, null=True)),
                ("personal_data", models.CharField(blank=True, max_length=128, null=True)),
                ("restrictions_on_usage", models.TextField(blank=True, null=True)),
                ("published", models.BooleanField(default=False)),
                ("published_at", models.DateField(blank=True, null=True)),
                ("updated_at", models.DateField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "enquiries_contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "secondary_enquiries_contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "information_asset_manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="info_asset_managed_visualisations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "information_asset_owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="info_asset_owned_visualisations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "visualisation_template",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="applications.visualisationtemplate",
                    ),
                ),
                (
                    "eligibility_criteria",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=256), null=True, size=None
                    ),
                ),
                (
                    "user_access_type",
                    models.CharField(
                        choices=[
                            ("REQUIRES_AUTHENTICATION", "Requires authentication"),
                            ("REQUIRES_AUTHORIZATION", "Requires authorization"),
                        ],
                        default="REQUIRES_AUTHENTICATION",
                        max_length=64,
                    ),
                ),
            ],
            options={
                "permissions": [
                    (
                        "manage_unpublished_visualisations",
                        "Manage (create, view, edit) unpublished visualisations",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="VisualisationUserPermission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "visualisation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="datasets.visualisationcatalogueitem",
                    ),
                ),
            ],
            options={
                "db_table": "app_visualisationuserpermission",
                "unique_together": {("user", "visualisation")},
            },
        ),
        migrations.RunPython(code=copy_permissions, reverse_code=noop),
        migrations.AlterField(
            model_name="visualisationcatalogueitem",
            name="visualisation_template",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="applications.visualisationtemplate",
            ),
        ),
        migrations.AlterField(
            model_name="sourcetable",
            name="frequency",
            field=models.IntegerField(
                choices=[
                    (1, "Daily"),
                    (2, "Weekly"),
                    (3, "Monthly"),
                    (4, "Quarterly"),
                    (6, "6-monthly"),
                    (5, "Annually"),
                    (7, "Ad hoc"),
                ],
                default=1,
            ),
        ),
        migrations.AlterField(
            model_name="sourceview",
            name="frequency",
            field=models.IntegerField(
                choices=[
                    (1, "Daily"),
                    (2, "Weekly"),
                    (3, "Monthly"),
                    (4, "Quarterly"),
                    (6, "6-monthly"),
                    (5, "Annually"),
                    (7, "Ad hoc"),
                ],
                default=1,
            ),
        ),
        migrations.CreateModel(
            name="VisualisationLink",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "visualisation_type",
                    models.CharField(
                        choices=[
                            ("DATASTUDIO", "Google Data Studio"),
                            ("QUICKSIGHT", "AWS QuickSight"),
                        ],
                        max_length=64,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Used as the displayed text in the download link", max_length=128
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        help_text="For Google Data Studio, the dashboard URL. For QuickSight, the dashboard ID.",
                        max_length=256,
                    ),
                ),
                (
                    "visualisation_catalogue_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="datasets.visualisationcatalogueitem",
                    ),
                ),
            ],
            options={
                "db_table": "app_visualisationlink",
            },
        ),
        migrations.CreateModel(
            name="CustomDatasetQueryTable",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "table",
                    models.CharField(
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$"
                            )
                        ],
                    ),
                ),
                (
                    "schema",
                    models.CharField(
                        default="public",
                        max_length=1024,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$"
                            )
                        ],
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tables",
                        to="datasets.customdatasetquery",
                    ),
                ),
            ],
        ),
        migrations.RunPython(set_query_tables),
        migrations.AddField(
            model_name="referencedatasetfield",
            name="linked_reference_dataset_field",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="linked_dataset_fields",
                to="datasets.referencedatasetfield",
            ),
        ),
        migrations.AddField(
            model_name="referencedatasetfield",
            name="relationship_name",
            field=models.CharField(
                blank=True,
                help_text='For use with linked reference dataset fields only. Give a name for the linked reference dataset, which will be appended with "_id" to form a foreign key in the database table. Where multiple fields are selected from the same linked reference dataset, the same name should be used',
                max_length=255,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Relationship names must start with a letter and contain only letters, numbers, underscores and full stops.",
                        regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$",
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="column_name",
            field=models.CharField(
                blank=True,
                help_text="Descriptive name for the field. This name is used in the Data Workspace database. Leave blank for linked reference dataset fields",
                max_length=255,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Column names must start with a letter and contain only letters, numbers, underscores and full stops.",
                        regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$",
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="data_type",
            field=models.IntegerField(
                choices=[
                    (1, "Character field"),
                    (2, "Integer field"),
                    (3, "Float field"),
                    (4, "Date field"),
                    (5, "Time field"),
                    (6, "Datetime field"),
                    (7, "Boolean field"),
                    (8, "Linked Reference Dataset field"),
                    (9, "Universal unique identifier field"),
                    (10, "Auto incrementing integer field"),
                ]
            ),
        ),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="is_display_name",
            field=models.BooleanField(
                default=False,
                help_text="This field is the name that will be displayed in the upload record form when referenced by other datasets",
            ),
        ),
        migrations.RunPython(update_linked_reference_datasets),
        migrations.AddField(
            model_name="dataset",
            name="published_at",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.RunPython(set_published_at_dates),
        migrations.CreateModel(
            name="Tag",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("type", models.IntegerField(choices=[(1, "Source"), (2, "Topic")], default=1)),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="dataset",
            name="tags",
            field=models.ManyToManyField(
                blank=True, related_name="_dataset_tags_+", to="datasets.Tag"
            ),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="tags",
            field=models.ManyToManyField(
                blank=True, related_name="_referencedataset_tags_+", to="datasets.Tag"
            ),
        ),
        migrations.RunPython(migrate_source_tags_to_tags),
        migrations.RemoveField(
            model_name="dataset",
            name="source_tags",
        ),
        migrations.RemoveField(
            model_name="referencedataset",
            name="source_tags",
        ),
        migrations.DeleteModel(
            name="SourceTag",
        ),
        migrations.CreateModel(
            name="ToolQueryAuditLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("rolename", models.CharField(max_length=64)),
                ("query_sql", models.TextField()),
                ("timestamp", models.DateTimeField()),
                (
                    "database",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="core.database"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="tags",
            field=models.ManyToManyField(
                blank=True, related_name="_visualisationcatalogueitem_tags_+", to="datasets.Tag"
            ),
        ),
        migrations.AddConstraint(
            model_name="toolqueryauditlog",
            constraint=models.UniqueConstraint(
                fields=("rolename", "query_sql", "timestamp"), name="unique toolqueryauditlog"
            ),
        ),
        migrations.RemoveConstraint(
            model_name="toolqueryauditlog",
            name="unique toolqueryauditlog",
        ),
        migrations.RunSQL(
            sql="CREATE UNIQUE INDEX tool_query_audit_log_unique ON datasets_toolqueryauditlog (rolename, timestamp, MD5(query_sql))",
            reverse_sql="DROP INDEX tool_query_audit_log_unique",
        ),
        migrations.AlterField(
            model_name="visualisationcatalogueitem",
            name="description",
            field=ckeditor.fields.RichTextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="ToolQueryAuditLogTable",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "schema",
                    models.CharField(
                        default="public",
                        max_length=63,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$"
                            )
                        ],
                    ),
                ),
                (
                    "table",
                    models.CharField(
                        max_length=63,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$"
                            )
                        ],
                    ),
                ),
                (
                    "audit_log",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tables",
                        to="datasets.toolqueryauditlog",
                    ),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="sourcetable",
            name="accessible_by_google_data_studio",
        ),
        migrations.AlterField(
            model_name="visualisationlink",
            name="visualisation_type",
            field=models.CharField(choices=[("QUICKSIGHT", "AWS QuickSight")], max_length=64),
        ),
        migrations.AlterField(
            model_name="visualisationlink",
            name="identifier",
            field=models.CharField(help_text="For QuickSight, the dashboard ID.", max_length=256),
        ),
        migrations.AddField(
            model_name="visualisationlink",
            name="data_source_last_updated",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="column_name",
            field=models.CharField(
                blank=True,
                help_text="Descriptive name for the field. This name is used in the Data Workspace database. Leave blank for linked reference dataset fields",
                max_length=255,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Column names must be lowercase and must start with a letter and contain only letters, numbers, underscores and full stops.",
                        regex="^[a-z][a-z0-9_\\.]*$",
                    )
                ],
            ),
        ),
        migrations.AddIndex(
            model_name="toolqueryauditlog",
            index=models.Index(fields=["timestamp", "id"], name="datasets_to_timesta_a37b49_idx"),
        ),
        migrations.AddField(
            model_name="sourcetable",
            name="dataset_finder_opted_in",
            field=models.BooleanField(
                default=False,
                help_text="Should this dataset be discoverable through Dataset Finder for all users, even if they haven’t been explicitly granted access?",
                verbose_name="IAM/IAO opt-in for Dataset Finder",
            ),
        ),
        migrations.AlterField(
            model_name="visualisationlink",
            name="visualisation_type",
            field=models.CharField(
                choices=[("QUICKSIGHT", "AWS QuickSight"), ("SUPERSET", "Superset")], max_length=64
            ),
        ),
        migrations.CreateModel(
            name="DataSetBookmark",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.dataset"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "app_datasetbookmark",
                "unique_together": {("user", "dataset")},
            },
        ),
        migrations.CreateModel(
            name="ReferenceDataSetBookmark",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "reference_dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.referencedataset"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "app_referencedatasetbookmark",
                "unique_together": {("user", "reference_dataset")},
            },
        ),
        migrations.CreateModel(
            name="VisualisationBookmark",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "visualisation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="datasets.visualisationcatalogueitem",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "app_visualisationbookmark",
                "unique_together": {("user", "visualisation")},
            },
        ),
        migrations.AddField(
            model_name="sourcetable",
            name="data_grid_enabled",
            field=models.BooleanField(
                default=False,
                help_text="Allow users to filter, sort and export data from within the browser",
            ),
        ),
        migrations.AddField(
            model_name="customdatasetquery",
            name="data_grid_enabled",
            field=models.BooleanField(
                default=False,
                help_text="Allow users to filter, sort and export data from within the browser",
            ),
        ),
        migrations.AlterField(
            model_name="referencedatasetuploadlogrecord",
            name="errors",
            field=models.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name="referencedatasetuploadlogrecord",
            name="row_data",
            field=models.JSONField(),
        ),
        migrations.AddField(
            model_name="dataset",
            name="authorized_email_domains",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=256),
                blank=True,
                default=list,
                help_text="Comma-separated list of domain names without spaces, e.g trade.gov.uk,fco.gov.uk",
                size=None,
            ),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="authorized_email_domains",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=256),
                blank=True,
                default=list,
                help_text="Comma-separated list of domain names without spaces, e.g trade.gov.uk,fco.gov.uk",
                size=None,
            ),
        ),
        migrations.CreateModel(
            name="DataSetVisualisation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                ("name", models.CharField(max_length=255)),
                ("summary", models.TextField()),
                ("vega_definition_json", models.TextField()),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="visualisations",
                        to="datasets.dataset",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "database",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.database",
                    ),
                ),
                ("query", models.TextField(blank=True, null=True)),
                ("gds_phase_name", models.CharField(blank=True, default="", max_length=25)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="dataset",
            name="licence_url",
            field=models.CharField(
                blank=True, help_text="Link to license (optional)", max_length=1024, null=True
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="licence",
            field=models.CharField(
                blank=True, help_text="Licence description", max_length=256, null=True
            ),
        ),
        migrations.AddField(
            model_name="sourcetable",
            name="data_grid_column_config",
            field=models.JSONField(
                blank=True,
                help_text='Must be a json object with a `columns` key containing a list of json objects defining:\n\n- "field": "[column name]" (required)\n- "headerName": "[pretty column name]" (optional, defaults to "field")\n- "sortable": [true|false] (optional, default: true)\n- "filter": "[true|false|ag-grid filter name]" (optional, default: true)\n\nOptionally can include the fields:\n\n- "download_enabled" (defaults to false)\n- "download_limit" (defaults to 5000 rows)',
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="datasets",
            field=models.ManyToManyField(
                blank=True, related_name="related_visualisations", to="datasets.DataSet"
            ),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="licence_url",
            field=models.CharField(
                blank=True, help_text="Link to license (optional)", max_length=1024, null=True
            ),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="licence_url",
            field=models.CharField(
                blank=True, help_text="Link to license (optional)", max_length=1024, null=True
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="user_access_type",
            field=models.CharField(
                choices=[
                    ("OPEN", "Everyone - for public data only, suitable to be shown in demos"),
                    ("REQUIRES_AUTHENTICATION", "All logged in users"),
                    ("REQUIRES_AUTHORIZATION", "Only specific authorized users or email domains"),
                ],
                default="REQUIRES_AUTHORIZATION",
                max_length=64,
            ),
        ),
        migrations.AlterField(
            model_name="visualisationcatalogueitem",
            name="user_access_type",
            field=models.CharField(
                choices=[
                    ("OPEN", "Everyone - for public data only, suitable to be shown in demos"),
                    ("REQUIRES_AUTHENTICATION", "All logged in users"),
                    ("REQUIRES_AUTHORIZATION", "Only specific authorized users or email domains"),
                ],
                default="REQUIRES_AUTHENTICATION",
                max_length=64,
            ),
        ),
        migrations.CreateModel(
            name="VisualisationLinkSqlQuery",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("data_set_id", models.UUIDField()),
                ("sql_query", models.TextField()),
                ("is_latest", models.BooleanField()),
                (
                    "visualisation_link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sql_queries",
                        to="datasets.visualisationlink",
                    ),
                ),
                ("table_id", models.UUIDField(default="00000000-0000-0000-0000-000000000000")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="dataset",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name="dataset",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="app_dataset_search__d970dd_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="referencedataset",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="app_referen_search__d655d7_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="visualisationcatalogueitem",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="datasets_vi_search__d20f56_gin"
            ),
        ),
        migrations.AddField(
            model_name="toolqueryauditlog",
            name="connection_from",
            field=models.GenericIPAddressField(null=True),
        ),
        migrations.AlterField(
            model_name="referencedatasetfield",
            name="data_type",
            field=models.IntegerField(
                choices=[
                    (1, "Character field"),
                    (2, "Integer field"),
                    (3, "Float field"),
                    (4, "Date field"),
                    (5, "Time field"),
                    (6, "Datetime field"),
                    (7, "Boolean field"),
                    (8, "Linked Reference Dataset field"),
                    (9, "Universal unique identifier field"),
                ]
            ),
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("changelog_id", models.IntegerField(unique=True)),
                ("change_date", models.DateTimeField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DataSetSubscription",
            fields=[
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("notify_on_schema_change", models.BooleanField(default=False)),
                ("notify_on_data_change", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="datasets.dataset",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "DataSet Subscription",
                "verbose_name_plural": "DataSet Subscriptions",
                "unique_together": {("user", "dataset")},
            },
        ),
        migrations.CreateModel(
            name="UserNotification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("email_id", models.UUIDField(null=True)),
                (
                    "notification",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="datasets.notification"
                    ),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="datasets.datasetsubscription",
                    ),
                ),
            ],
            options={
                "unique_together": {("notification", "subscription")},
            },
        ),
        migrations.AlterModelOptions(
            name="tag",
            options={"ordering": ("name",)},
        ),
        migrations.AddField(
            model_name="dataset",
            name="acronyms",
            field=models.CharField(blank=True, default="", max_length=255),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="acronyms",
            field=models.CharField(blank=True, default="", max_length=255),
        ),
        migrations.RunPython(save_datasets, reverse_code=migrations.RunPython.noop),
        migrations.AddField(
            model_name="datasetsubscription",
            name="object_id",
            field=models.UUIDField(null=True),
        ),
        migrations.AddField(
            model_name="datasetsubscription",
            name="content_type",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="datasetsubscription",
            unique_together={("user", "object_id")},
        ),
        migrations.RemoveField(
            model_name="datasetsubscription",
            name="dataset",
        ),
        migrations.RemoveField(
            model_name="notification",
            name="change_date",
        ),
        migrations.AddField(
            model_name="notification",
            name="content_type",
            field=models.ForeignKey(
                default=None,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="notification",
            name="object_id",
            field=models.TextField(default=None),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="Pipeline",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("table_name", models.CharField(max_length=256, unique=True)),
                ("sql_query", models.TextField()),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="is_draft",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="sourcetable",
            name="data_grid_download_enabled",
            field=models.BooleanField(
                default=False,
                help_text="Allow users to download from the data grid (requires a download limit)",
            ),
        ),
        migrations.AddField(
            model_name="sourcetable",
            name="data_grid_download_limit",
            field=models.IntegerField(
                blank=True,
                help_text="Set the maximum number of records that can be downloaded from the data grid (required if data grid download is enabled)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sourcetable",
            name="data_grid_enabled",
            field=models.BooleanField(
                default=True,
                help_text="Allow users to filter, sort and export data from within the browser",
            ),
        ),
        migrations.RunPython(code=set_download_limit, reverse_code=migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="sourcetable",
            name="data_grid_column_config",
        ),
        migrations.CreateModel(
            name="DataSetChartBuilderChart",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("summary", models.TextField()),
                ("gds_phase_name", models.CharField(blank=True, default="", max_length=25)),
                (
                    "chart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="datasets",
                        to="explorer.chartbuilderchart",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="charts",
                        to="datasets.dataset",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PendingAuthorizedUsers",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("users", models.JSONField(null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="pipeline",
            name="config",
            field=models.JSONField(default={}),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="pipeline",
            name="type",
            field=models.CharField(
                choices=[("sql", "SQL Pipeline"), ("sharepoint", "Sharepoint Pipeline")],
                default="sql",
                max_length=255,
            ),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="PipelineVersion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("table_name", models.CharField(max_length=256)),
                (
                    "pipeline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="datasets.pipeline"
                    ),
                ),
                ("config", models.JSONField(default={})),
            ],
            options={
                "ordering": ("-created_date",),
                "get_latest_by": "created_date",
            },
        ),
        migrations.RunPython(migrate_sql_pipelines, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="pipeline",
            name="sql_query",
        ),
        migrations.AlterModelOptions(
            name="pipeline",
            options={"ordering": ("table_name",)},
        ),
        migrations.RemoveField(
            model_name="datasetchartbuilderchart",
            name="chart",
        ),
        migrations.AddField(
            model_name="datasetchartbuilderchart",
            name="chart",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="datasets",
                to="core.chartbuilderchart",
            ),
            preserve_default=False,
        ),
        migrations.AlterModelOptions(
            name="masterdataset",
            options={
                "permissions": [
                    (
                        "manage_unpublished_master_datasets",
                        "Manage (create, view, edit) unpublished source datasets",
                    )
                ],
                "verbose_name": "Source Dataset",
            },
        ),
        migrations.CreateModel(
            name="SourceTableFieldDefinition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "field",
                    models.CharField(
                        max_length=63,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-zA-Z][a-zA-Z0-9_\\.]*$"
                            )
                        ],
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=1024, null=True)),
                (
                    "source_table",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="field_definitions",
                        to="datasets.sourcetable",
                    ),
                ),
            ],
        ),
        migrations.RunPython(migrate_query_download_events, migrations.RunPython.noop),
        migrations.AddField(
            model_name="dataset",
            name="dictionary_published",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="dataset",
            name="search_vector_english",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="search_vector_english",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="search_vector_english",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name="dataset",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector_english"], name="app_dataset_search__3874e4_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="referencedataset",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector_english"], name="app_referen_search__ec8dc9_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="visualisationcatalogueitem",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector_english"], name="datasets_vi_search__8e4669_gin"
            ),
        ),
        migrations.RunPython(generate_search_vector_english),
        migrations.AddField(
            model_name="dataset",
            name="average_unique_users_daily",
            field=models.FloatField(default=0),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="average_unique_users_daily",
            field=models.FloatField(default=0),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="average_unique_users_daily",
            field=models.FloatField(default=0),
        ),
        migrations.RemoveIndex(
            model_name="dataset",
            name="app_dataset_search__d970dd_gin",
        ),
        migrations.RemoveIndex(
            model_name="referencedataset",
            name="app_referen_search__d655d7_gin",
        ),
        migrations.RemoveIndex(
            model_name="visualisationcatalogueitem",
            name="datasets_vi_search__d20f56_gin",
        ),
        migrations.RemoveField(
            model_name="dataset",
            name="search_vector",
        ),
        migrations.RemoveField(
            model_name="referencedataset",
            name="search_vector",
        ),
        migrations.RemoveField(
            model_name="visualisationcatalogueitem",
            name="search_vector",
        ),
        migrations.AddField(
            model_name="dataset",
            name="search_vector_english_description",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dataset",
            name="search_vector_english_name",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dataset",
            name="search_vector_english_short_description",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dataset",
            name="search_vector_english_tags",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="search_vector_english_description",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="search_vector_english_name",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="search_vector_english_short_description",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="search_vector_english_tags",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="search_vector_english_description",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="search_vector_english_name",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="search_vector_english_short_description",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="visualisationcatalogueitem",
            name="search_vector_english_tags",
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="ReferenceDatasetInheritingFromDataSet",
            fields=[],
            options={
                "verbose_name": "Reference dataset inheriting from dataset",
                "verbose_name_plural": "Reference datasets inheriting from datasets",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("datasets.dataset",),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="type",
            field=models.IntegerField(
                choices=[(1, "Master Dataset"), (2, "Data Cut"), (0, "Reference Dataset")],
                default=2,
            ),
        ),
        migrations.AddField(
            model_name="referencedataset",
            name="reference_dataset_inheriting_from_dataset",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="datasets.referencedatasetinheritingfromdataset",
                unique=True,
            ),
        ),
        migrations.RunPython(map_referencedatasets_to_datasets),
        migrations.RunPython(resave_reference_datasets, reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name="dataset",
            name="type",
            field=models.IntegerField(
                choices=[(1, "Source Dataset"), (2, "Data Cut"), (0, "Reference Dataset")],
                default=2,
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="type",
            field=models.IntegerField(
                choices=[(1, "Source dataset"), (2, "Data cut"), (0, "Reference dataset")],
                default=2,
            ),
        ),
        migrations.RunPython(
            resave_reference_dataset_tags, reverse_code=migrations.RunPython.noop
        ),
    ]
